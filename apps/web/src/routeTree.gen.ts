/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ExtensionCallbackRouteImport } from './routes/extension-callback'
import { Route as BookmarksRouteImport } from './routes/bookmarks'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BookmarksSlugRouteImport } from './routes/bookmarks.$slug'
import { Route as BookmarksPublicIdRouteImport } from './routes/bookmarks.public.$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ExtensionCallbackRoute = ExtensionCallbackRouteImport.update({
  id: '/extension-callback',
  path: '/extension-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const BookmarksRoute = BookmarksRouteImport.update({
  id: '/bookmarks',
  path: '/bookmarks',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookmarksSlugRoute = BookmarksSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => BookmarksRoute,
} as any)
const BookmarksPublicIdRoute = BookmarksPublicIdRouteImport.update({
  id: '/public/$id',
  path: '/public/$id',
  getParentRoute: () => BookmarksRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bookmarks': typeof BookmarksRouteWithChildren
  '/extension-callback': typeof ExtensionCallbackRoute
  '/login': typeof LoginRoute
  '/bookmarks/$slug': typeof BookmarksSlugRoute
  '/bookmarks/public/$id': typeof BookmarksPublicIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bookmarks': typeof BookmarksRouteWithChildren
  '/extension-callback': typeof ExtensionCallbackRoute
  '/login': typeof LoginRoute
  '/bookmarks/$slug': typeof BookmarksSlugRoute
  '/bookmarks/public/$id': typeof BookmarksPublicIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/bookmarks': typeof BookmarksRouteWithChildren
  '/extension-callback': typeof ExtensionCallbackRoute
  '/login': typeof LoginRoute
  '/bookmarks/$slug': typeof BookmarksSlugRoute
  '/bookmarks/public/$id': typeof BookmarksPublicIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bookmarks'
    | '/extension-callback'
    | '/login'
    | '/bookmarks/$slug'
    | '/bookmarks/public/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bookmarks'
    | '/extension-callback'
    | '/login'
    | '/bookmarks/$slug'
    | '/bookmarks/public/$id'
  id:
    | '__root__'
    | '/'
    | '/bookmarks'
    | '/extension-callback'
    | '/login'
    | '/bookmarks/$slug'
    | '/bookmarks/public/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookmarksRoute: typeof BookmarksRouteWithChildren
  ExtensionCallbackRoute: typeof ExtensionCallbackRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/extension-callback': {
      id: '/extension-callback'
      path: '/extension-callback'
      fullPath: '/extension-callback'
      preLoaderRoute: typeof ExtensionCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookmarks': {
      id: '/bookmarks'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof BookmarksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookmarks/$slug': {
      id: '/bookmarks/$slug'
      path: '/$slug'
      fullPath: '/bookmarks/$slug'
      preLoaderRoute: typeof BookmarksSlugRouteImport
      parentRoute: typeof BookmarksRoute
    }
    '/bookmarks/public/$id': {
      id: '/bookmarks/public/$id'
      path: '/public/$id'
      fullPath: '/bookmarks/public/$id'
      preLoaderRoute: typeof BookmarksPublicIdRouteImport
      parentRoute: typeof BookmarksRoute
    }
  }
}

interface BookmarksRouteChildren {
  BookmarksSlugRoute: typeof BookmarksSlugRoute
  BookmarksPublicIdRoute: typeof BookmarksPublicIdRoute
}

const BookmarksRouteChildren: BookmarksRouteChildren = {
  BookmarksSlugRoute: BookmarksSlugRoute,
  BookmarksPublicIdRoute: BookmarksPublicIdRoute,
}

const BookmarksRouteWithChildren = BookmarksRoute._addFileChildren(
  BookmarksRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookmarksRoute: BookmarksRouteWithChildren,
  ExtensionCallbackRoute: ExtensionCallbackRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
